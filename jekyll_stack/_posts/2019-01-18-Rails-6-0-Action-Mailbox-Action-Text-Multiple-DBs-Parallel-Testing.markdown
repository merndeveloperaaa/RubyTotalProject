---
layout: post
title: 'Rails 6.0.0 beta1: Action Mailbox, Action Text, Multiple DBs, Parallel Testing, Webpacker by default'
categories: releases
author: dhh
published: true
date: 2019-01-18 12:00:00 -08:00
---
The first beta release of Rails 6 is here! It's absolutely packed with amazing new stuff that we're so excited to share. There are two major new frameworks â€“ Action Mailbox and Action Text â€“ and two important scalable-by-default upgrades in great multiple database support and parallel testing.

[Action Mailbox](https://rubyonrails.org/2018/12/13/introducing-action-mailbox-for-rails-6) routes incoming emails to controller-like mailboxes for processing in Rails. It ships with ingresses for Amazon SES, Mailgun, Mandrill, Postmark, and SendGrid. You can also handle inbound mails directly via the built-in Exim, Postfix, and Qmail ingresses. The foundational work on Action Mailbox was done by George Claghorn and yours truly.

[Action Text](https://rubyonrails.org/2018/10/3/introducing-action-text-for-rails-6) brings rich text content and editing to Rails. It includes the Trix editor that handles everything from formatting to links to quotes to lists to embedded images and galleries. The rich text content generated by the Trix editor is saved in its own RichText model that's associated with any existing Active Record model in the application. Any embedded images (or other attachments) are automatically stored using Active Storage and associated with the included RichText model. The foundational work on Action Text was done by Sam Stephenson, Javan Makhmali, and yours truly.

The [new multiple database support](https://github.com/rails/rails/pull/34052) makes it easy for a single application to connect to, well, multiple databases at the same time! You can either do this because you want to segment certain records into their own databases for scaling or isolation, or because you're doing read/write splitting with replica databases for performance. Either way, there's a new, simple API for making that happen without reaching inside the bowels of Active Record. The foundational work for multiple-database support was done by Eileen Uchitelle and Aaron Patterson.

With [parallel testing support](https://github.com/rails/rails/pull/31900), you can finally take advantage of all those cores in your machine to run big test suites faster. Each testing worker gets its own database and runs in its own thread, so you're not pegging one CPU to 100% while the other 9 sit idle by (y'all do have a 10-core iMac Pro, right ðŸ˜‚). Hurray! The foundational work for parallel-testing support was done by Eileen Uchitelle and Aaron Patterson.

Webpacker is now the default JavaScript bundler for Rails through the new app/javascript directory. We're still using the asset pipeline with Sprockets for CSS and static assets, though. The two integrate very nicely and offer the best trade-off of advanced JavaScript features with an it-just-works approach to other assets.

Those are just some of the marque additions, but Rails 6.0 is also packed with minor changes, fixes, and upgrades. Just some I'd call out: [Proper Action Cable testing](https://github.com/rails/rails/pull/33659#issue-209385961), Action Cable JavaScript rewritten in ES6, protection against DNS rebinding attacks, and per-environment credentials. Also, Rails 6 will require Ruby 2.5.0+ now. You can check out everything in [the individual framework CHANGELOG files](https://github.com/rails/rails/tree/v6.0.0.beta1) for the nitty-gritty rundown.

Finally, you should pay attention to [Xavier Noria's new Zeitwerk code loader for Ruby](https://medium.com/@fxn/zeitwerk-a-new-code-loader-for-ruby-ae7895977e73). It didn't make the integration cut for beta1, but starting with beta2, it'll be the new autoloader for Rails. Be prepared to say goodbye to any lingering require or require_dependency calls in your code!

We are still roughly on track with [our published timeline for the final Rails 6.0 release](https://rubyonrails.org/2018/12/20/timeline-for-the-release-of-Rails-6-0), so consult that plan for your migration planning, but please do help us already by testing your application on beta1! I'd also encourage anyone with a moderate level of Rails experience to start any new app using beta1, rather than the Rails 5.2.x series. Basecamp is already running Rails 6.0.0.beta1 in production, and both Shopify and GitHub and surely others will follow close thereafter. This isn't some rickety-shack release.

This release, and all releases leading up to Rails 6.0 final, was shepherded by release manager Rafael FranÃ§a with support by Kasper Timm Hansen.  

Thanks again to everyone who keeps working on making Rails better! It's incredible that we're still able to keep this intense rate of improvement going after all these years. Rails has never been in fitter shape to help the broadest number of web developers build excellent apps in a way they love. Let joy be sparked!