---
layout: post
title: This Week in Edge Rails
categories:
- edge
author: Mike Gunderloy
published: true
date: 2008-11-14 15:29:00.000000000 +00:00
---
<p>The important news in edge Rails this week is the imminent release of Rails 2.2.1 &#8211; otherwise known as Rails 2.2 RC2. Getting ready for this release did lead to some significant changes in the Rails codebase.</p>
<p>First, it&#8217;s very likely that you&#8217;ll need to upgrade rubygems to run RC2: the required version of rubygems is now 1.3.1, which was <a href="http://blog.segment7.net/articles/2008/11/13/rubygems-1-3-1">just released yesterday</a>. This dependency is part of the continued work to make vendored gems useful and stable. You may find that updating rubygems is less than smooth, depending on your current version; check out <a href="http://afreshcup.com/2008/10/25/rails-212-and-22rc1-update-your-rubygems/">this article</a> if you have any trouble. <a href="http://github.com/rails/rails/commit/549b18c9286b6cccf4978093576325fd711dc421">commit</a></p>
<p>The Rails routing engine has seen some serious work over the past week as well.  For starters, Jeremy Kemper committed several fixes to the core routing engine that cut down on object creation and RegExp creation, trimming memory use. <a href="http://github.com/rails/rails/commit/5db9f9b3ad47fadf0b3f12ada1c2ea7b9c15ded5">commit</a> <a href="http://github.com/rails/rails/commit/278b6cd9529f33286449a9be18f1903687814d3f">commit</a> There are also new <code>:only</code> and <code>:except</code> options for <code>map.resources</code>, which can help cut down memory use if you have a lot of resource routes &#8211; see <a href="http://ryandaigle.com/articles/2008/11/13/what-s-new-in-edge-rails-except-and-only-routing-options">these</a> <a href="http://afreshcup.com/2008/11/12/rails-22-change-limited-resource-routes/">articles</a> for details (though there have been some tweaks in the way nested limited routes work after those were written). <a href="http://github.com/rails/rails/commit/2ecec6052f7f290252a9fd9cc27ec804c7aad36c">commit</a> <a href="http://github.com/rails/rails/commit/4c0921024471c0463d67f8b8fb6a115a94d343aa">commit</a> <a href="http://github.com/rails/rails/commit/44a3009ff068bf080de6764a8c884fbf0ceb920e">commit</a></p>
<p>The new ActiveRecord connection pooling code has seen some tuning as well, making it more efficient in development model and avoiding some issues with the Oracle adapter. <a href="http://github.com/rails/rails/commit/d20955f889223b6035dbc7d61acba9091bf7b7ed">commit</a></p>
<p>Polymorphic URLs now behave more intuitively if one of their parameters is nil. For example, a call to <code>polymorphic_path([</code>project, <code>filter, @issue])</code> with a nil filter now returns <code>project_issue_url</code> instead of a NoMethodError. <a href="http://github.com/rails/rails/commit/94d6716324126028b89dde886f160474049b1b0c">commit</a></p>
<p>The request forgery protection feature in Rails has been tightened up so that it only applies to <span class="caps">HTML</span>-formatted content requests. There is substantial discussion on the <a href="http://rails.lighthouseapp.com/projects/8994/tickets/1145-bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request">Lighthouse ticket</a> that led to this change, but the bottom line is that the old implementation had some bugs, notably making destroy actions inaccessible via <span class="caps">XML</span>. Other types of requests are protected by other means &#8211; for instance, the same origin policy on <span class="caps">AJAX</span> requests substitutes for request forgery protection there. <a href="http://github.com/rails/rails/commit/fbbcd6f29aeccc938b97b5c01717365f8b67912c">commit</a></p>