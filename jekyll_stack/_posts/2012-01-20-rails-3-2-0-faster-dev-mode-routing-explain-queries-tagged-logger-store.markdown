---
layout: post
title: ! 'Rails 3.2.0: Faster dev mode & routing, explain queries, tagged logger,
  store'
categories:
- releases
author: David
published: true
date: 2012-01-20 17:22:00.000000000 +00:00
---
<p>So we didn&#8217;t quite make the December release date as we intended, but hey, why break a good tradition and start hitting release targets now! In any case, your patience has been worldly rewarded young grasshopper: Rails 3.2 is done, baked, tested, and ready to roll!</p>
<p>I&#8217;ve been running on 3-2-stable for a few months working on <a href="http://37signals.com/basecampnext/">Basecamp Next</a> and it&#8217;s been a real treat. The new faster dev mode in particular is a major step up over 3.1.</p>
<p>Do remember that this is the last intended release series that&#8217;s going to support Ruby 1.8.7. The master git branch for Rails is now targeting Rails 4.0, which will require Ruby 1.9.3 and above. So now is a great time to start the work on getting your app ready for the current version of Ruby. Let&#8217;s not hang around old versions forever and a Sunday like those Python guys :).</p>
<p>There&#8217;s a <a href="https://github.com/rails/rails/tree/v3.2.0">v3.2.0 tag on Github</a> and we of course we still have the <a href="https://github.com/rails/rails/tree/3-2-stable">3-2-stable branch</a> as well. You can see all the glorious details of everything that was changed in our <a href="https://gist.github.com/1648523"><span class="caps">CHANGELOG</span> compilation</a>.</p>
<p>For documentation, we have the <a href="http://guides.rubyonrails.org/3_2_release_notes.html">3.2 release notes with upgrade instructions</a>, both <a href="http://api.rubyonrails.org/">the <span class="caps">API</span> docs</a> and <a href="http://guides.rubyonrails.org/">the guides</a> have been generated for 3.2 as well, and there&#8217;s a brand new <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails">3.2-compatible version of Agile Web Development with Rails</a>. A smörgåsbord indeed!</p>
<p>Note: If you&#8217;re having trouble installing the gems under Ruby 1.8.7, you&#8217;ve probably hit a RubyGems bug with <span class="caps">YAML</span> that&#8217;s been fixed in RubyGems 1.8.15. You can upgrade RubyGems using &#8220;gem update &#8212;system&#8221;.</p>
<p>If you can&#8217;t be bothered with the full release notes, here&#8217;s a reprint of a few feature highlights from when we did the first release candidate:</p>
<p><strong>Faster dev mode &amp; routing</strong></p>
<p>The most noticeable new feature is that development mode got a ton and a half faster. Inspired by <a href="https://github.com/paneq/active_reload">Active Reload</a>, we now only reload classes from files you&#8217;ve actually changed. The difference is dramatic on a larger application.</p>
<p>Route recognition also got a bunch faster thanks to the <a href="https://github.com/rails/journey">new Journey engine</a> and we made linking much faster as well (especially apparent when you&#8217;re having 100+ links on a single page).</p>
<p><strong>Explain queries</strong></p>
<p>We&#8217;ve added a <a href="https://rubyonrails.org/2011/12/6/what-s-new-in-edge-rails-explain">quick and easy way to explain quieries generated by ARel</a>. In the console, you can run something like <code>puts Person.active.limit(5).explain</code> and you&#8217;ll get the query ARel produces explained (so you can easily see whether its using the right indexes). There&#8217;s even a default threshold in development mode where if a query takes more than half a second to run, it&#8217;s automatically explained inline &#8212; how about that!</p>
<p><strong>Tagged logger</strong></p>
<p>When you&#8217;re running a multi-user, multi-account application, it&#8217;s a great help to be able to filter the log by who did what. Enter the TaggedLogging wrapper. It works like this:</p>
<pre><code>Logger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT))
Logger.tagged("BCX") { Logger.info "Stuff" } # Logs "[BCX] Stuff"
Logger.tagged("BCX") do
  Logger.tagged("Jason") do
    Logger.info "Stuff" # Logs "\[BCX\] \[Jason\] Stuff"
  end
end</code></pre>
<p><strong>Active Record Store</strong></p>
<p>Key/value stores are great, but it&#8217;s not always you want to go the whole honking way just for a little variable-key action. Enter the Active Record Store:</p>
<pre><code>class User &lt; ActiveRecord::Base
  store :settings, accessors: [ :color, :homepage ]
end</code>
 
<code>u = User.new(color: 'black', homepage: '37signals.com')
u.color                          # Accessor stored attribute
u.settings[:country] = 'Denmark' # Any attribute, even if not specified with an accessor</code></pre>