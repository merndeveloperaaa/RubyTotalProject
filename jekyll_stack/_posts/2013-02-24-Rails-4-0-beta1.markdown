---
layout: post
title: 'Rails 4.0: Beta 1 released!'
category: releases
author: dhh
published: true
date: 2013-02-25 18:00:00 -06:00
---
Hot on the heels of the first production version of Ruby 2.0 comes the first beta version of Rails 4.0. The two form a great pair and are already running in production on a number of applications, including <a href="http://basecamp.com/breeze">Basecamp Breeze</a>. In fact, Ruby 2.0 is the preferred Ruby to use with Rails 4.0.

The purpose of this beta is to get as many people as possible to try to upgrade from Rails 3.2 and earlier and to get an adventurous few to start new applications directly on Rails 4.0. That's the only way we're going to suss out all the issues and ensure that we can launch a solid final release. So please help us with that if you can!

Rails 4.0 is packed with new goodies and farewells to old goodies past their expiration date. 

A big focus has been on making it dead simple to build modern web applications that are screaming fast without needing to go the client-side JS/JSON server route. Much of this work was <a href="http://37signals.com/svn/posts/3112-how-basecamp-next-got-to-be-so-damn-fast-without-using-much-client-side-ui">pioneered for Rails in the new version of Basecamp</a> and focuses on three aspects:

1. Make it super easy to do Russian Doll-caching through <a href="http://37signals.com/svn/posts/3113-how-key-based-cache-expiration-works">key-based expiration</a> with automatic dependency management of nested templates (explored first in the <a href="https://github.com/rails/cache_digests">cache_digests</a> plugin).
1. Speed-up the client-side with <a href="https://github.com/rails/turbolinks/">Turbolinks</a>, which essentially turns your app into a single-page javascript application in terms of speed, but with none of the developmental drawbacks (except, maybe, compatibility issues with some existing JavaScript packages).
1. <a href="https://github.com/rails/rails/commit/ed5c938fa36995f06d4917d9543ba78ed506bb8d">Declarative etags</a> makes it even easier to ensure you're taking advantage of HTTP freshness.

Rails is of course still a great JSON server for people who want to build client-side JS views, but with the progress we've made for Rails 4.0, you certainly won't need to go down that route just to have a super fast application.

We've also added <a href="http://tenderlovemaking.com/2012/07/30/is-it-live.html">live streaming for persistent connections</a> and Rails 4.0 is now safe for threaded servers out of the box (no more need for config.threadsafe!).

Active Record has received a ton of love as well to make everything related to scoping and the query structure more consistent.

Given all the fun we've had with security issues, we have some great updates there as well:

* Session store is now encrypted by default (formerly just signed).
* <a href="https://github.com/rails/strong_parameters">Strong Parameters</a> take over from attr_protected (now a <a href="https://github.com/rails/protected_attributes">plugin</a>) to guard against foreign parameters.
* Security headers like X-Frame-Options, X-XSS-Protection, X-Content-Type-Options are on by default with solid values.
* XML Parameter parsing has been sent to a <a href="https://github.com/rails/actionpack-xml_parser">plugin</a>.

On top of these new features and fixes, we have hundreds more of all sorts. Everything has been combed over, streamlined, simplified, and we've extracted out lots of old APIs and things that just don't fit "most people most of the time". 

<a href="https://github.com/rails/activeresource">Active Resource</a>, <a href="https://github.com/rails/rails-observers">Active Record Observers</a>, and Action Pack <a href="https://github.com/rails/actionpack-page_caching">page</a> and <a href="https://github.com/rails/actionpack-action_caching">action caching</a> are all examples of things that are no longer in core, but lives on in plugins.

We encourage you to peruse the CHANGELOGs for all the Rails frameworks and delight over the hundreds of improvements we've made to Rails 4.0: <a href="https://github.com/rails/rails/blob/v4.0.0.beta1/actionpack/CHANGELOG.md">Action Pack</a>, <a href="https://github.com/rails/rails/blob/v4.0.0.beta1/activemodel/CHANGELOG.md">Active Model</a>, <a href="https://github.com/rails/rails/blob/v4.0.0.beta1/activerecord/CHANGELOG.md">Active Record</a>, <a href="https://github.com/rails/rails/blob/v4.0.0.beta1/activesupport/CHANGELOG.md">Active Support</a>, <a href="https://github.com/rails/rails/blob/v4.0.0.beta1/railties/CHANGELOG.md">Rails</a>.

Now let's all work together to ensure the release is final and enjoy the bad-ass combination of Ruby on Rails 24! (Or 42?). Please report all the issues you find on the <a href="https://github.com/rails/rails/issues?state=open">Rails issue tracker</a>. We're still working on the <a href="http://edgeguides.rubyonrails.org/upgrading_ruby_on_rails.html#upgrading-from-rails-3-2-to-rails-4-0">upgrade guide from 3.2 to 4.0</a>, but that's a good place to start for help on how to do it. As always, install betas with `gem install rails --version 4.0.0.beta1 --no-ri --no-rdoc` (--pre and ri generation is busted on RubyGems 2.0 at the moment) or depend on the <a href="https://github.com/rails/rails/tree/v4.0.0.beta1">v4.0.0.beta1 tag</a>.
