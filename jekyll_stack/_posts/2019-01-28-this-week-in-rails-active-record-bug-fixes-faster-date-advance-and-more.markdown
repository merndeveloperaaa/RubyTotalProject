---
layout: post
title: "Active Record bug fixes, faster Date#advance, and more!"
categories: news
author: eugeneius
published: true
date: 2019-01-28
---


Hello everyone! This is [Eugene](https://twitter.com/eugeneius), with a selection of interesting improvements to Rails merged in the past week.

### [Don't load app environment when editing credentials](https://github.com/rails/rails/pull/34789)

Support for [per-environment credentials](https://github.com/rails/rails/pull/33521) is coming in Rails 6.0, but adding a new environment wasn't always easy: if your application accessed credentials during boot, the `credentials:edit` command would fail to run, which would in turn prevent you from adding the missing credentials. Oops!

### [All queries should return correct results even if they include large numbers](https://github.com/rails/rails/pull/30000)

When prepared statements are enabled, querying an integer column with an out-of-range value causes an error in the underlying database driver. To work around this issue, Active Record used to refuse to run the query and always return a negative result, e.g. `ActiveRecord::RecordNotFound`.

This approach worked for simple queries, but gave incorrect results for more complex ones. Out-of-range values are now converted to "impossible" predicates instead (e.g. `WHERE 1=0`), which allows the query to run without an error while still producing the correct result.

Speaking of large numbers: this pull request, opened 18 months ago, was number 30,000 on the Rails repository. ðŸŽˆ

### [Fix year value when casting a multi-parameter time hash](https://github.com/rails/rails/pull/34990)

Values stored in `TIME` columns in the database are mapped to `Time` objects in Ruby. The latter includes date parts, where the former doesn't; to deal with this discrepancy, a default date of January 1st, 2000 is always assigned.

When a multi-parameter time valueâ€”as generated by the `time_select` helperâ€”was assigned to an attribute, its year would be set to 1970 instead, producing a different result depending on where the value came from.

With this fix, time attributes have fully joined us in the 21st century. ðŸ––

### [Faster and more memory-efficient `Date#advance`](https://github.com/rails/rails/pull/34972)

This method was copying its options hash unnecessarily. Now that it doesn't, it's both faster and allocates less memory.

[28 people](https://contributors.rubyonrails.org/contributors/in-time-window/20190122-20190127) contributed to Rails since our last issue; you can see the [full list of changes here](https://github.com/rails/rails/compare/master@%7B2019-01-22%7D...@%7B2019-01-27%7D).

Until next week!
